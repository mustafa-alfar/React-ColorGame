{"version":3,"sources":["Card.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","_this$props","this","props","showing","backgroundColor","onClick","id","style","react_default","a","createElement","className","Component","Navbar","href","onNewGame","CardState","HIDING","SHOWING","MATCHING","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cards","cardState","shuffle","handleClick","bind","assertThisInitialized","handleNewGame","state","noClick","e","map","c","objectSpread","setState","_this2","changeCard","idToChange","newCardState","includes","foundCard","find","showingCards","filter","ids","length","hidingCards","setTimeout","_this3","card","src_Card_0","key","src_Navbar_0","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0bc45d0.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nclass Card extends Component {\n\tstatic propTypes = {\n\t\tshowing: PropTypes.bool.isRequired,\n\t\tbackgroundColor : PropTypes.string.isRequired,\n\t\tonClick : PropTypes.func.isRequired\n\t}\n\trender(){\n\t\tconst {showing,backgroundColor,onClick,id} = this.props;\n\t\tlet style = {};\n\t\tif(showing){\n\t\t\tstyle.backgroundColor = backgroundColor; \n\t\t}\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div \n\t\t\t\t\tonClick={() => onClick(id)}\n\t\t\t\t\tclassName='card' \n\t\t\t\t\tstyle={style} \n\t\t\t\t/> \n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = (props) => {\n\treturn(\n\t\t<header>\n\t\t\t<h2>Memory Game</h2>\n\t\t\t<nav>\n\t\t\t\t<li><a href='#' onClick={() => props.onNewGame()}>New Game</a></li>\n\t\t\t</nav>\n\t\t</header>\n\t)\n}\nNavbar.propTypes = {\n\tonNewGame:PropTypes.func.isRequired\n}\nexport default Navbar;","import React, { Component } from 'react';\nimport Card from './Card';\nimport Navbar from './Navbar';\nimport './App.css';\nimport shuffle from 'shuffle-array';\n\nconst CardState = {\n  HIDING : 0,\n  SHOWING : 1,\n  MATCHING :2\n}\n export default class App extends Component {\n  constructor(props){\n    super(props);\n    let cards = [\n      {id: 0, cardState: CardState.HIDING, backgroundColor: 'red'},\n      {id: 1, cardState: CardState.HIDING, backgroundColor: 'red'},\n      {id: 2, cardState: CardState.HIDING, backgroundColor: 'navy'},\n      {id: 3, cardState: CardState.HIDING, backgroundColor: 'navy'},\n      {id: 4, cardState: CardState.HIDING, backgroundColor: 'green'},\n      {id: 5, cardState: CardState.HIDING, backgroundColor: 'green'},\n      {id: 6, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n      {id: 7, cardState: CardState.HIDING, backgroundColor: 'yellow'},\n      {id: 8, cardState: CardState.HIDING, backgroundColor: 'black'},\n      {id: 9, cardState: CardState.HIDING, backgroundColor: 'black'},\n      {id: 10, cardState: CardState.HIDING, backgroundColor: 'purple'},\n      {id: 11, cardState: CardState.HIDING, backgroundColor: 'purple'},\n      {id: 12, cardState: CardState.HIDING, backgroundColor: 'pink'},\n      {id: 13, cardState: CardState.HIDING, backgroundColor: 'pink'},\n      {id: 14, cardState: CardState.HIDING, backgroundColor: 'lightgreen'},\n      {id: 15, cardState: CardState.HIDING, backgroundColor: 'lightgreen'}\n    ];\n    cards = shuffle(cards);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n    this.state = {cards,noClick : false}\n  }\n  handleNewGame(e){\n    let cards = this.state.cards.map(c => ({\n      ...c,\n      cardState : CardState.HIDING\n    }));\n    cards = shuffle(cards)\n    this.setState({cards})\n  }\n  handleClick(id) {\n    const changeCard = (cards,idToChange,newCardState) => {\n      return cards.map(c => {\n        if(idToChange.includes(c.id)){\n          return {\n            ...c,\n            cardState : newCardState\n          }\n        } return c;\n      })\n    }\n    const foundCard = this.state.cards.find(c => c.id === id);\n    if(this.state.noClick || foundCard.cardState !== CardState.HIDING){\n      return;\n    }\n    let noClick = false;\n    let cards = changeCard(this.state.cards,[id],CardState.SHOWING);\n    const showingCards = cards.filter(c => c.cardState === CardState.SHOWING);\n    const ids = showingCards.map(c => c.id);\n    if(showingCards.length === 2 &&\n      showingCards[0].backgroundColor === showingCards[1].backgroundColor){\n      cards = changeCard(cards,ids,CardState.MATCHING);\n    } else if(showingCards.length === 2){\n      noClick = true;\n      const hidingCards = changeCard(cards,ids,CardState.HIDING);\n      this.setState({cards,noClick},() => {\n        setTimeout(() => {\n          this.setState({cards:hidingCards,noClick:false})\n        },1300)\n      })\n      return ;\n    } \n    this.setState({cards,noClick})\n  }\n  render() {\n    const cards = this.state.cards.map((card) => (\n      <Card \n        key={card.id} \n        showing={card.cardState !== CardState.HIDING} \n        backgroundColor={card.backgroundColor} \n        id={card.id}\n        onClick={this.handleClick}\n      />\n    ))\n    return (\n      <div className=\"App\">\n      <Navbar onNewGame={this.handleNewGame}/>\n        {cards}\n      </div>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}